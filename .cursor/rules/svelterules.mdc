---
description: 
globs: 
alwaysApply: true
---
# SvelteKit Development Guide

## Project Structure and Conventions
SvelteKit organizes routes in the `src/routes` directory, typically relying on **+page.svelte**, **+layout.svelte**, and **+page.server.js** or **+layout.server.js** to govern routing and rendering. A single route folder might contain `@+page.svelte` for user interface code and `@+page.server.js` for server-side logic or environment-sensitive tasks. Placing shared components, interfaces, or stores in a separate directory like `src/lib` keeps the project organized and streamlines collaboration.

## Server-Side and Client-Side Logic
Sensitive tasks, such as database access or calling private APIs, should reside in server-only files like `@+page.server.js` or `@+layout.server.ts`. This ensures that confidential details remain hidden from client bundles. Components in `@+page.svelte` or `@+layout.svelte` handle the UI and typically use load functions or form actions to retrieve data from these server endpoints, preserving the benefits of SvelteKit’s SSR (Server-Side Rendering) while keeping data handling secure.

## Error Handling and Custom Pages
SvelteKit’s built-in mechanism for detecting or presenting errors can center on `@+error.svelte`, which provides a graceful way to show the user what happened if the application encounters a problem. Similarly, a `@+layout.svelte` file can include logic for handing off partial failures across nested routes, preventing blank pages or unhelpful stack traces when the application hits an unexpected state.

## Environment Variables
Files under `$env` allow SvelteKit to manage secrets without exposing them to the client. Server-only variables typically go in `$env/dynamic/private` so they remain fully secured on the backend. Use these modules when building server endpoints in `@+page.server.js` or `@+layout.server.js` that require a key or token. This arrangement protects sensitive information and prevents accidental exposure in user-facing code.

## Hot Reloading and Debugging
SvelteKit’s development server generally supports hot reload out of the box. If strange behaviors arise, checking the console logs in both the browser and the server can highlight where an error originates. Warnings may indicate routing misconfigurations, SSR usage issues, or out-of-date modules. Observing these messages and following their recommendations is a straightforward step toward stable operation.

## Security and Validation
User input validation remains a top priority for form actions, data submissions, and server logic. Any form in `@+page.svelte` that sends user data to a server endpoint in `@+page.server.js` should sanitize and verify the data received. Centralizing authentication or session management in `@src/hooks.server.ts` streamlines how credentials are processed across multiple routes, promoting consistent usage patterns and limiting the risks of oversights in distributed logic.

## Testing and Deployment
SvelteKit is bundled with Vite, offering a versatile configuration for production builds. Tools like Vitest can test components and utilities, while Playwright or Cypress facilitate end-to-end validation of user flows. Monitoring logs in production further aids in diagnosing runtime issues or performance bottlenecks. Where images, fonts, or other static files are involved, using responsive loading strategies can enhance both page load speed and rendering performance for end users.

## Collaboration and Version Control
Frequent version control commits accompanied by clear messages allow teams to track incremental changes and quickly revert if something goes awry. Pull requests encourage code reviews where collaborators can provide feedback or recommendations. This workflow keeps quality in check and aligns the team on layout standards, naming schemes, or architectural decisions, making the project easier to maintain and evolve.

SvelteKit’s conventions and tooling suit many project sizes, and these suggestions reinforce clarity and security. By consistently structuring routes, separating logic, and following best practices in error management, environment usage, and testing, development remains both efficient and maintainable.
